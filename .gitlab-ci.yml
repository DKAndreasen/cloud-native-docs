variables:
  STAGING_HOST: "sw-docs-dgx-station.nvidia.com"
  STAGING_SRC_PATH: "/raid/webapps/ROOT/datacenter/cloud-native-play"
  STAGING_USER: "swdocs"
  CONTAINER_TEST_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  CONTAINER_RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:0.1.0"
  BUILDER_IMAGE: "${CONTAINER_RELEASE_IMAGE}"

stages:
  - .pre
  - build
  - deploy


build_builder:
  image: docker:19.03.12
  stage: .pre
  services:
    - docker:19.03.12-dind
  tags:
    - os/linux
    - type/docker
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker build -t "${CONTAINER_TEST_IMAGE}" . -f docker/Dockerfile
    - docker push "${CONTAINER_TEST_IMAGE}"
    - echo "BUILDER_IMAGE=${CONTAINER_TEST_IMAGE}" >> build.env
    - >
      if [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ] && [ "${CI_PIPELINE_SOURCE}" == "push" ]; then
        docker tag "${CONTAINER_TEST_IMAGE}" "${CONTAINER_RELEASE_IMAGE}"
        docker push "${CONTAINER_RELEASE_IMAGE}"
      fi
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - docker/Dockerfile
        - "deps/*"
        - repo.toml


build:
  stage: build
  image: "${BUILDER_IMAGE}"
  script:
    - ./repo docs -p container-toolkit || true
    - ./repo docs -p driver-containers || true
    - ./repo docs -p gpu-operator || true
    - ./repo docs -p review || true
    - echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> build.env
  tags:
    - os/linux
    - type/docker
  artifacts:
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}
    paths:
      - _build
    expire_in: 1h
    reports:
      dotenv: build.env
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH =~ /-v[0-9]/



pages:
  image: "${CONTAINER_RELEASE_IMAGE}"
  stage: deploy
  script:
  - rm -rf public
  - cp -r _build/docs/ public
  tags:
  - pages
  artifacts:
    paths:
    - public
  dependencies:
  - build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"

.ssh-setup:
  stage: deploy
  before_script:
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 0600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts


# https://about.gitlab.com/blog/2016/12/07/building-a-new-gitlab-docs-site-with-nanoc-gitlab-ci-and-gitlab-pages/
review:
  extends: .ssh-setup
  stage: deploy
  cache: {}
  image: "${BUILDER_IMAGE}"
  tags:
    - os/linux
    - type/docker
  environment:
    name: "review/${CI_MERGE_REQUEST_IID}"
    url: "https://${STAGING_HOST}/datacenter/cloud-native-play/review/${CI_MERGE_REQUEST_IID}/"
    on_stop: review_stop
  script:
    - ls _build/docs/
    - cd _build/docs/
    - ssh "${STAGING_USER}@${STAGING_HOST}" mkdir -p "${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
    - |+
      pushd review/latest
        rsync -avz --delete . "${STAGING_USER}@${STAGING_HOST}:${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
      popd
    - |+
      for x in gpu-operator container-toolkit driver-containers
      do
        pushd "${x}"
        rsync -avz --delete . "${STAGING_USER}@${STAGING_HOST}:${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}/${x}"
        popd
      done
  dependencies:
    - build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


review_stop:
  extends: .ssh-setup
  stage: deploy
  cache: {}
  dependencies: []
  image: "${BUILDER_IMAGE}"
  tags:
    - os/linux
    - type/docker
  environment:
    name: "review/${CI_MERGE_REQUEST_IID}"
    action: stop
  script:
    - echo "Delete files from ${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
    - ssh "${STAGING_USER}@${STAGING_HOST}" rm -rf "${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  when: manual


deploy_to_internal:
  extends: .ssh-setup
  stage: deploy
  image:
    name: "${CONTAINER_RELEASE_IMAGE}"
  tags:
    - os/linux
    - type/docker
  variables:
    HTML_PATH: "_build/docs/"
  script:
    - export VERSION="${CI_COMMIT_BRANCH#*v}"
    - export COMPONENT="${CI_COMMIT_BRANCH%-v*}"
    - |+
      if [[ "${CI_COMMIT_MESSAGE}" =~ "/latest" ]]; then
        export FORCE_LATEST=true
      fi
    - echo "Releasing internal docs for ${COMPONENT} and version ${VERSION}"
    - |+
      for x in "${COMPONENT}"
      do
        isnew=$(if ssh "${STAGING_USER}@${STAGING_HOST}" "ls ${STAGING_SRC_PATH}/${x}/${VERSION} 2> /dev/null"; then echo "false"; else echo "true"; fi)
        echo "Uploading ${x} HTML as version...${VERSION} and is new...${isnew} or forcing_latest...${FORCE_LATEST}"
        pushd "${HTML_PATH}/${x}/latest"
          rsync -avz --delete . "${STAGING_USER}@${STAGING_HOST}:${STAGING_SRC_PATH}/${x}/${VERSION}/"
          if [ "true" == "${isnew}" ] || [ "true" == "${FORCE_LATEST}" ]; then
            rsync -avz --delete . "${STAGING_USER}@${STAGING_HOST}:${STAGING_SRC_PATH}/${x}/latest/"
            rsync -avz ./versions.json "${STAGING_USER}@${STAGING_HOST}:${STAGING_SRC_PATH}/${x}/versions.json"
          fi
        popd
      done
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH =~ /[a-z-]+-v[0-9]+.+/ && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web")