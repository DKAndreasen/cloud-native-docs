variables:
  STAGING_HOST: "sw-docs-dgx-station.nvidia.com"
  STAGING_SRC_PATH: "/raid/webapps/ROOT/datacenter/cloud-native-play"
  STAGING_USER: "swdocs"
  CONTAINER_TEST_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  CONTAINER_RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:0.1.0"
  BUILDER_IMAGE: "${CONTAINER_RELEASE_IMAGE}"

stages:
  - .pre
  - build
  - deploy


build_builder:
  image: docker:19.03.12
  stage: .pre
  services:
    - docker:19.03.12-dind
  tags:
    - os/linux
    - type/docker
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker build -t "${CONTAINER_TEST_IMAGE}" . -f docker/Dockerfile
    - docker push "${CONTAINER_TEST_IMAGE}"
    - echo "BUILDER_IMAGE=${CONTAINER_TEST_IMAGE}" >> build.env
    - >
      if [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ] && [ "${CI_PIPELINE_SOURCE}" == "push" ]; then
        docker tag "${CONTAINER_TEST_IMAGE}" "${CONTAINER_RELEASE_IMAGE}"
        docker push "${CONTAINER_RELEASE_IMAGE}"
      fi
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - docker/Dockerfile
        - "deps/*"
        - repo.toml


build:
  stage: build
  image: "${BUILDER_IMAGE}"
  script:
    - ./repo docs -p container-toolkit || true
    - ./repo docs -p driver-containers || true
    - ./repo docs -p gpu-operator || true
    - ./repo docs -p review || true
    - echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> build.env
  tags:
    - os/linux
    - type/docker
  artifacts:
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}
    paths:
      - _build
    expire_in: 1h
    reports:
      dotenv: build.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"



pages:
  image: "${CONTAINER_RELEASE_IMAGE}"
  stage: deploy
  script:
  - ./repo docs --build internal
  - rm -rf public
  - cp -r _build/docs/forge-docs/latest-internal public
  tags:
  - pages
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"


# https://about.gitlab.com/blog/2016/12/07/building-a-new-gitlab-docs-site-with-nanoc-gitlab-ci-and-gitlab-pages/
review:
  stage: deploy
  cache: {}
  image: "${BUILDER_IMAGE}"
  tags:
    - os/linux
    - type/docker
  environment:
    name: "review/${CI_MERGE_REQUEST_IID}"
    url: "https://${STAGING_HOST}/datacenter/cloud-native-play/review/${CI_MERGE_REQUEST_IID}/review/latest/"
    on_stop: review_stop
  script:
    - ls _build/docs/
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 0600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - cd _build/docs/
    - ssh "${STAGING_USER}@${STAGING_HOST}" mkdir -p "${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
    - rsync -avz --delete . "${STAGING_USER}@${STAGING_HOST}:${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
  dependencies:
    - build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


review_stop:
  stage: deploy
  cache: {}
  image: "${BUILDER_IMAGE}"
  tags:
    - os/linux
    - type/docker
  environment:
    name: "review/${CI_MERGE_REQUEST_IID}"
    action: stop
  script:
    - echo "Delete files from ${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 0600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - ssh "${STAGING_USER}@${STAGING_HOST}" rm -rf "${STAGING_SRC_PATH}/review/${CI_MERGE_REQUEST_IID}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  when: manual
